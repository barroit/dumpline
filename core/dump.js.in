/* SPDX-License-Identifier: GPL-3.0-or-later */
/*
 * Copyright 2025 Jiamu Sun <barroit@linux.com>
 */

import { cfg_read, cfg_write } from './config.js'

const LINE_HEIGHT = 0
let LINE_HEIGHT_RATIO
const LINE_HEIGHT_MIN = 8

const scale = window.devicePixelRatio

const canvas_box = document.getElementById('canvas-box')
const canvas = document.getElementById('canvas')
const buffer = document.getElementById('buffer')

const banner = document.getElementById('banner')
const link = document.getElementById('link')

let dumpline
let ctx

let binary
let blob
let complete

let line_height_fixed = 0

function error(str)
{
	dumpline.postMessage({ error: str })
}

function warn(str)
{
	dumpline.postMessage({ warn: str })
}

/*
 * No API? Fine. We just went ahead and built the damn thing ourselves.
 *
 * src/vs/editor/common/config/fontInfo.ts:_create()
 */
function line_height_calc(h, scale)
{
	if (h == 0)
		h = LINE_HEIGHT_RATIO * scale
	else if (h < LINE_HEIGHT_MIN)
		h *= scale

	h = Math.round(h)
	return h < LINE_HEIGHT_MIN ? LINE_HEIGHT_MIN : h
}

function fixup_line_height()
{
	const root = document.documentElement
	const styles = getComputedStyle(canvas)

	const font_size = styles.getPropertyValue('--vscode-editor-font-size')
	let line_height = cfg_read(ctx.config, 'editor', 'lineHeight')

	if (!Number.isInteger(line_height))
		line_height = LINE_HEIGHT
	line_height = line_height_calc(line_height, parseInt(font_size))

	cfg_write(ctx.config, 'editor', 'lineHeight', line_height)
	root.style.setProperty('--39-line-height', `${ line_height }px`)
	line_height_fixed = 1
}

function css_prop(styles, name)
{
	return styles.getPropertyValue(name)
}

function parse_text(text, styles)
{
	const foreground = css_prop(styles, '--vscode-editor-foreground')
	const background = css_prop(styles, '--vscode-editor-background')
	const font_family = css_prop(styles, '--vscode-editor-font-family')
	const font_weight = css_prop(styles, '--vscode-editor-font-weight')
	const fone_size = css_prop(styles, '--vscode-editor-font-size')
	const line_height = css_prop(styles, '--39-line-height')

	let out = `<div style="color: ${ foreground }; ` +
			      `background-color: ${ background }; ` +
			      `font-family: ${ font_family }; ` +
			      `font-weight: ${ font_weight }; ` +
			      `font-size: ${ fone_size }; ` +
			      `line-height: ${ line_height }; ` +
			      'white-space: pre">'

	const lines = text.split('\n')
	const san = document.createElement('div')

	for (const line of lines) {
		if (line == '') {
			out +='<br>'
			continue
		}

		san.textContent = line
		out += '<div>' +
			 `<span style="color: ${ foreground }">` +
			    san.innerHTML +
			 '</span>' +
		       '</div>'
	}

	out += '</div>'
	return out
}

function clipboard_as_html(transfer)
{
	const data = transfer.getData('text/html')

	if (data)
		return data

	const text = transfer.getData('text/plain')
	const styles = getComputedStyle(canvas)

	return parse_text(text, styles)
}

async function image_render(event, done)
{
	const img = event.target
	const d2 = buffer.getContext('2d')

	d2.setTransform(scale, 0, 0, scale, 0, 0)
	d2.drawImage(img, 0, 0)

	blob = await new Promise(ret => buffer.toBlob(ret))
	if (blob)
		binary = await blob.arrayBuffer()

	done()
}

function image_init(html)
{
	canvas.innerHTML = html

	const clone = canvas_box.cloneNode(true)
	const child = canvas.firstChild

	const w = child.offsetWidth
	const h = child.offsetHeight

	clone.setAttribute('width', w)
	clone.setAttribute('height', h)

	buffer.width = w * scale
	buffer.height = h * scale

	return clone
}

async function image_dump(event)
{
	if (!ctx.ready) {
		error('command palette required')
		return
	}
	ctx.ready = 0

	if (!line_height_fixed)
		fixup_line_height()

	const html = clipboard_as_html(event.clipboardData)
	const xml = image_init(html)

	const fmter = new XMLSerializer()
	const str = fmter.serializeToString(xml)

	const uri = encodeURIComponent(str)
	const b64 = `data:image/svg+xml;charset=utf-8,${ uri }`
	const img = new Image()

	await new Promise(done =>
	{
		img.src = b64
		img.onload = (event) => image_render(event, done)
	})

	if (blob)
		dumpline.postMessage({ binary })
}

async function image_dump_clipboard(event)
{
	if (!blob) {
		warn('nothing to be done')
		return
	}

	await new Promise(r => complete = r)

	const data = {
		[ blob.type ]: blob,
	}
	const item = new ClipboardItem(data)

	navigator.clipboard.write([ item ])
}

document.addEventListener('cut',  image_dump_clipboard)
document.addEventListener('copy', image_dump_clipboard)
document.addEventListener('paste', image_dump)

window.addEventListener('focus', () =>
{
	if (complete) {
		complete()
		complete = undefined
	}
})

window.addEventListener('message', event =>
{
	if (!dumpline)
		dumpline = acquireVsCodeApi()

	ctx = event.data
	ctx.ready = 1

	LINE_HEIGHT_RATIO = ctx.platform == 'darwin' ? 1.5 : 1.35
	document.execCommand('paste')
})

link.addEventListener('click', event =>
{
	dumpline.postMessage({ open: event.target.href })
})

banner.addEventListener('contextmenu', event =>
{
	event.preventDefault()
})
